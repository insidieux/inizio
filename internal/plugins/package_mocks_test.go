package plugins

import (
	"context"
	"os/exec"

	"github.com/insidieux/inizio/pkg/sdk/generator"
	"github.com/stretchr/testify/mock"
)

// --- Mocks ---

// mockPluginClientInterface is an autogenerated mock type for the plugin.ClientInterface type
type mockPluginClientInterface struct {
	mock.Mock
}

// Dispense provides a mock function with given fields:
func (_m *mockPluginClientInterface) Dispense() (generator.Generator, error) {
	ret := _m.Called()

	var r0 generator.Generator
	if rf, ok := ret.Get(0).(func() generator.Generator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(generator.Generator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockGenerator is an autogenerated mock type for the Generator type
type mockGenerator struct {
	mock.Mock
}

// Run provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockGenerator) Run(_a0 context.Context, _a1 generator.RunOptions, _a2 generator.RunValues) (generator.RunResult, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 generator.RunResult
	if rf, ok := ret.Get(0).(func(context.Context, generator.RunOptions, generator.RunValues) generator.RunResult); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(generator.RunResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, generator.RunOptions, generator.RunValues) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockConfigInterface is an autogenerated mock type for the ConfigInterface type
type mockConfigInterface struct {
	mock.Mock
}

// Lookup provides a mock function with given fields: _a0
func (_m *mockConfigInterface) Lookup(_a0 string) (PluginConfigInterface, error) {
	ret := _m.Called(_a0)

	var r0 PluginConfigInterface
	if rf, ok := ret.Get(0).(func(string) PluginConfigInterface); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(PluginConfigInterface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockPluginConfigInterface is an autogenerated mock type for the PluginConfigInterface type
type mockPluginConfigInterface struct {
	mock.Mock
}

// Command provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockPluginConfigInterface) Command(_a0 context.Context, _a1 string, _a2 string) (*exec.Cmd, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *exec.Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *exec.Cmd); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*exec.Cmd)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockClientInterface is an autogenerated mock type for the ClientInterface type
type mockClientInterface struct {
	mock.Mock
}

// Name provides a mock function with given fields:
func (_m *mockClientInterface) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Run provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockClientInterface) Run(_a0 context.Context, _a1 generator.RunOptions, _a2 generator.RunValues) (generator.RunResult, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 generator.RunResult
	if rf, ok := ret.Get(0).(func(context.Context, generator.RunOptions, generator.RunValues) generator.RunResult); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(generator.RunResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, generator.RunOptions, generator.RunValues) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
